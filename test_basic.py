#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª–µ–π
"""

import sys
import os

def test_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        import ai_assistant
        print("‚úì ai_assistant –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ai_assistant: {e}")
        return False
    
    try:
        import file_operations
        print("‚úì file_operations –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ file_operations: {e}")
        return False
    
    try:
        import ui_components
        print("‚úì ui_components –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ui_components: {e}")
        return False
    
    try:
        import editor
        print("‚úì editor –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ editor: {e}")
        return False
    
    return True


def test_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    if not os.path.exists('config.ini'):
        print("‚úó config.ini –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("‚úì config.ini –Ω–∞–π–¥–µ–Ω")
    
    import configparser
    config = configparser.ConfigParser()
    
    try:
        config.read('config.ini')
        
        if 'API' in config:
            print("‚úì –°–µ–∫—Ü–∏—è [API] –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print("‚úó –°–µ–∫—Ü–∏—è [API] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        if 'AI_SETTINGS' in config:
            print("‚úì –°–µ–∫—Ü–∏—è [AI_SETTINGS] –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print("‚úó –°–µ–∫—Ü–∏—è [AI_SETTINGS] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è config.ini: {e}")
        return False


def test_ai_assistant():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
    
    try:
        from ai_assistant import AIAssistant
        
        # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º –∫–ª—é—á–æ–º
        assistant = AIAssistant("test_key")
        print("‚úì AIAssistant —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤
        methods = [
            'is_ready', 'generate_async', 'improve_text', 
            'rewrite_text', 'continue_text', 'fix_grammar',
            'shorten_text', 'expand_text', 'translate_text',
            'summarize_text', 'generate_document', 'chat'
        ]
        
        for method in methods:
            if hasattr(assistant, method):
                print(f"‚úì –ú–µ—Ç–æ–¥ {method} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚úó –ú–µ—Ç–æ–¥ {method} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –≤ AIAssistant: {e}")
        return False


def test_file_operations():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
    
    try:
        from file_operations import FileOperations
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤
        methods = [
            'new_document', 'open_txt', 'open_docx',
            'save_txt', 'save_docx', 'export_pdf',
            'get_file_extension', 'is_valid_path'
        ]
        
        for method in methods:
            if hasattr(FileOperations, method):
                print(f"‚úì –ú–µ—Ç–æ–¥ {method} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚úó –ú–µ—Ç–æ–¥ {method} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        content = FileOperations.new_document()
        print("‚úì new_document —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        ext = FileOperations.get_file_extension("test.txt")
        if ext == ".txt":
            print("‚úì get_file_extension —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚úó get_file_extension –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
            return False
        
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –≤ FileOperations: {e}")
        return False


def test_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    dependencies = {
        'customtkinter': 'CustomTkinter UI framework',
        'docx': 'python-docx –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å .docx',
        'reportlab': 'ReportLab –¥–ª—è PDF',
        'google.generativeai': 'Google Generative AI'
    }
    
    all_ok = True
    for module, description in dependencies.items():
        try:
            __import__(module)
            print(f"‚úì {description}")
        except ImportError:
            print(f"‚úó {description} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            all_ok = False
    
    return all_ok


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("=" * 50)
    print("–ó–ê–ü–£–°–ö –ë–ê–ó–û–í–´–• –¢–ï–°–¢–û–í")
    print("=" * 50)
    
    results = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    results.append(("–ò–º–ø–æ—Ä—Ç—ã", test_imports()))
    results.append(("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config()))
    results.append(("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", test_dependencies()))
    results.append(("AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", test_ai_assistant()))
    results.append(("–§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", test_file_operations()))
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í")
    print("=" * 50)
    
    passed = 0
    failed = 0
    
    for name, result in results:
        status = "‚úì PASSED" if result else "‚úó FAILED"
        print(f"{name}: {status}")
        if result:
            passed += 1
        else:
            failed += 1
    
    print("\n" + "=" * 50)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{len(results)}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}/{len(results)}")
    print("=" * 50)
    
    if failed == 0:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print(f"\n‚ö†Ô∏è –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {failed}")
        return 1


if __name__ == "__main__":
    sys.exit(main())
